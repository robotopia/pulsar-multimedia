#set terminal pngcairo enhanced size 800,600 background rgb "black"

pdvdata   = arg1
basename  = arg2
nframes   = arg3
framerate = arg4
nbins     = arg5

# Animation description (timing is approximate)
# |----- 3s ------| 1s -|---- 4s ----|----------- 6s ------------|
#   rotate pulses  pause  accelerate pulses & zoom to final view
#
# Total = 14 secs
#
# Elements that need animating:
# View angle:        from t=8 to t=12
# Pulse rotation:    from t=0 to t=3
# Pulse locations:   from t=4 to t=14
# 
# Therefore, define checkpoints:
totaltime   = 14.0  # (arbitrary units: not necessarily seconds)
checkpoints = "0.0 3.0 4.0 8.0 12.0 14.0"
cps         = ""  # will store checkpoints in "clock" units (0 <= cp <= 1)
do for [i=1:words(checkpoints)] {
    cp  = word(checkpoints,i) + 0.0
    cps = cps.sprintf("%f ", cp/totaltime)
}

cpn(n) = word(cps,n)+0.0   # Extract the nth checkpoint

# Various clock functions
smth_clock(T)        = 3*T**2 - 2*T**3                                  # Smooth the animation
sub_clock(T, T1, T2) = (T < T1 ? 0 : (T > T2 ? 1 : (T - T1)/(T2 - T1))) # Get a "sub" clock
acc_clock(T, a)      = T**a

# Easier to manipulate plot elements in parametric
set parametric

# Plot look and feel
set ls 1 lw 2 lc rgb "white"
set size ratio -1
set xrange [0:10]

#do for [frame=1:nframes] {

frame = 1
    # Make "clocks" for various effects
    # Clocks are always between 0 and 1 inclusive
    clock = (frame - 1.0) / (nframes - 1.0)   # 0 <= clock <= 1
    clock_rot = smth_clock(sub_clock(clock, cpn(1), cpn(2)))
    clock_vw  = smth_clock(sub_clock(clock, cpn(4), cpn(5)))
    clock_loc =  acc_clock(sub_clock(clock, cpn(3), cpn(6)), 4)
    #print clock, clock_rot, clock_vw, clock_loc

    # Set the output file for this frame
#    outfile = sprintf("%s%04d.png", basename, frame)
#    set output outfile

    # Be selective with the data in the input files so that gnuplot doesn't have
    # to process the whole file for every frame
    # The proportion of pulses that contributes to the mean profile is clock_loc
    

    # Plot it (with rotation for now)
    rot_angle = clock_rot * pi/2.0
    splot pdvdata using ($1+cos(rot_angle)*$3/nbins):(-sin(rot_angle)*$3/nbins):4 w l notitle

#}
